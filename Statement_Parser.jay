%{
import java.util.*;

class Statement_Parser {
%}

%token LBRACE
%token RBRACE
%token LBRACKET
%token RBRACKET
%token IF
%token SEMICOLON
%token IDENTIFIER
%token WHILE
%token DO
%token PUBLIC
%token PRIVATE
%token PROTECTED
%token PLUSPLUS
%token MINUSMINUS
%token SET
%token NUMBER
%token FOR
%token PLUS
%token MINUS
%token MULTIPLY
%token DIVIDE

%%

statement   : ifstatement {}
            | emptystatement {}
            | whilestatement {}
            | dowhilestatement {}
            | returnstatement {}

statements  : statement { }
            | statements statement { }

ifstatement : IF LBRACE boolexpression RBRACE LBRACKET statements RBRACKET elsestatement { }

elsestatement   : ELSE LBRACKET statements RBRACKET {}
                | ELSE ifstatement {}
                | {}

emptystatement  : SEMICOLON {}

whilestatement  : WHILE LBRACE boolexpression RBRACE LBRACKET statements RBRACKET {}

dowhilestatement    : DO LBRACKET statements RBRACKET WHILE LBRACE boolexpression RBRACE {}

forstatement    : FOR LBRACE defineintstatement SEMICOLON boolexpression SEMICOLON mathexpression RBRACE LBRACKET statements RBRACKET {}

forwithvariablestatement    : FOR LBRACE IDENTIFIER SEMICOLON boolexpression SEMICOLON mathexpression RBRACE LBRACKET statements RBRACKET {}

classstatement  : visabiltyexpression CLASS IDENTIFIER LBRACKET statements RBRACKET {}

staticclassstatement    : visabiltyexpression staticexpression CLASS IDENTIFIER LBRACKET statements RBRACKET {}

returnstatement : RETURN SEMICOLON {}
                | RETURN expression SEMICOLON {}

mathstatement   : IDENTIFIER {}
                | IDENTIFIER PLUSPLUS {}
                | IDENTIFIER MINUSMINUS {}
                | IDENTIFIER SET IDENTIFIER mathexpression NUMBER {}
                | IDENTIFIER SET IDENTIFIER mathexpression IDENTIFIER {}
                | IDENTIFIER SET NUMBER mathexpression NUMBER {}
                | IDENTIFIER SET NUMBER mathexpression IDENTIFIER {}
                | LBRACE mathstatement RBRACE mathexpression mathstatement {}
                | mathstatement mathexpression LBRACE mathstatement RBRACE {}

staticexpression    : static {}

visabiltyexpression : PUBLIC {}
                    | PRIVATE {}
                    | PROTECTED {}

comparingexpression : AND {}
                    | OR {}
                    | EQUALS {}
                    | LESSTHAN {}
                    | GREATERTHAN {}
                    | LESSOREQUAL {}
                    | MOREOREQUAL {}

mathexpression  : PLUS {}
                | MINUS {}
                | MULTIPLY {}
                | DIVIDE {}

%%
  }
